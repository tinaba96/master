// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kerneldl_backward_HH_
#define _kerneldl_backward_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kerneldl_backward_tempp.h"

namespace ap_rtl {

struct kerneldl_backward : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<19> > mpool_max_address0;
    sc_out< sc_logic > mpool_max_ce0;
    sc_in< sc_lv<2> > mpool_max_q0;
    sc_out< sc_lv<15> > dout_address0;
    sc_out< sc_logic > dout_ce0;
    sc_out< sc_logic > dout_we0;
    sc_out< sc_lv<32> > dout_d0;
    sc_in< sc_lv<32> > dout_q0;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    kerneldl_backward(sc_module_name name);
    SC_HAS_PROCESS(kerneldl_backward);

    ~kerneldl_backward();

    sc_trace_file* mVcdFile;

    kerneldl_backward_tempp* tempp_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<19> > i_0_reg_109;
    sc_signal< sc_lv<19> > i1_0_reg_120;
    sc_signal< sc_lv<1> > icmp_ln537_fu_136_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<19> > i_13_fu_142_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln539_fu_148_p1;
    sc_signal< sc_lv<64> > zext_ln539_reg_211;
    sc_signal< sc_lv<64> > zext_ln539_reg_211_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln539_fu_153_p2;
    sc_signal< sc_lv<1> > icmp_ln539_reg_222;
    sc_signal< sc_lv<1> > icmp_ln550_fu_178_p2;
    sc_signal< sc_lv<1> > icmp_ln550_reg_231;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<19> > i_fu_184_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<64> > zext_ln552_fu_190_p1;
    sc_signal< sc_lv<64> > zext_ln552_reg_240;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state6;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<19> > tempp_address0;
    sc_signal< sc_logic > tempp_ce0;
    sc_signal< sc_logic > tempp_we0;
    sc_signal< sc_lv<32> > tempp_q0;
    sc_signal< sc_lv<19> > tempp_address1;
    sc_signal< sc_logic > tempp_ce1;
    sc_signal< sc_logic > tempp_we1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > sext_ln543_fu_168_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<32> > p_1_fu_34;
    sc_signal< sc_lv<32> > p_fu_162_p2;
    sc_signal< sc_lv<32> > p_fu_162_p0;
    sc_signal< sc_lv<32> > sext_ln543_fu_168_p0;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state8;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<19> ap_const_lv19_4C2C0;
    static const sc_lv<19> ap_const_lv19_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state6_pp1_stage0_iter0();
    void thread_ap_block_state7_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_dout_address0();
    void thread_dout_ce0();
    void thread_dout_d0();
    void thread_dout_we0();
    void thread_i_13_fu_142_p2();
    void thread_i_fu_184_p2();
    void thread_icmp_ln537_fu_136_p2();
    void thread_icmp_ln539_fu_153_p2();
    void thread_icmp_ln550_fu_178_p2();
    void thread_mpool_max_address0();
    void thread_mpool_max_ce0();
    void thread_p_fu_162_p0();
    void thread_p_fu_162_p2();
    void thread_sext_ln543_fu_168_p0();
    void thread_sext_ln543_fu_168_p1();
    void thread_tempp_address0();
    void thread_tempp_address1();
    void thread_tempp_ce0();
    void thread_tempp_ce1();
    void thread_tempp_we0();
    void thread_tempp_we1();
    void thread_zext_ln539_fu_148_p1();
    void thread_zext_ln552_fu_190_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kerneldl_forward_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1d_actc_address0,
        conv1d_actc_ce0,
        conv1d_actc_we0,
        conv1d_actc_d0,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        b_address0,
        b_ce0,
        b_q0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_pp0_stage0 = 24'd2;
parameter    ap_ST_fsm_state4 = 24'd4;
parameter    ap_ST_fsm_state5 = 24'd8;
parameter    ap_ST_fsm_state6 = 24'd16;
parameter    ap_ST_fsm_state7 = 24'd32;
parameter    ap_ST_fsm_state8 = 24'd64;
parameter    ap_ST_fsm_pp1_stage0 = 24'd128;
parameter    ap_ST_fsm_pp1_stage1 = 24'd256;
parameter    ap_ST_fsm_pp1_stage2 = 24'd512;
parameter    ap_ST_fsm_pp1_stage3 = 24'd1024;
parameter    ap_ST_fsm_pp1_stage4 = 24'd2048;
parameter    ap_ST_fsm_pp1_stage5 = 24'd4096;
parameter    ap_ST_fsm_pp1_stage6 = 24'd8192;
parameter    ap_ST_fsm_state25 = 24'd16384;
parameter    ap_ST_fsm_state26 = 24'd32768;
parameter    ap_ST_fsm_state27 = 24'd65536;
parameter    ap_ST_fsm_state28 = 24'd131072;
parameter    ap_ST_fsm_state29 = 24'd262144;
parameter    ap_ST_fsm_state30 = 24'd524288;
parameter    ap_ST_fsm_state31 = 24'd1048576;
parameter    ap_ST_fsm_state32 = 24'd2097152;
parameter    ap_ST_fsm_state33 = 24'd4194304;
parameter    ap_ST_fsm_state34 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv1d_actc_address0;
output   conv1d_actc_ce0;
output   conv1d_actc_we0;
output  [31:0] conv1d_actc_d0;
output  [11:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
output  [18:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;
output  [15:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [18:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv1d_actc_ce0;
reg conv1d_actc_we0;
reg[11:0] in_r_address0;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;
reg kernel_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] i_0_reg_155;
reg   [6:0] indvar_flatten_reg_199;
reg   [2:0] t_0_reg_210;
reg   [31:0] empty_26_reg_221;
reg   [4:0] k_0_reg_233;
wire   [0:0] icmp_ln349_fu_253_p2;
reg   [0:0] icmp_ln349_reg_448;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] i_fu_259_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln351_fu_265_p1;
reg   [63:0] zext_ln351_reg_457;
wire   [18:0] add_ln356_fu_276_p2;
reg   [18:0] add_ln356_reg_470;
wire    ap_CS_fsm_state5;
wire   [9:0] select_ln359_fu_288_p3;
reg   [9:0] select_ln359_reg_475;
wire   [0:0] icmp_ln356_fu_270_p2;
wire   [8:0] select_ln359_1_fu_302_p3;
reg   [8:0] select_ln359_1_reg_483;
wire    ap_CS_fsm_state7;
wire   [15:0] mul_ln359_1_fu_320_p2;
reg   [15:0] mul_ln359_1_reg_499;
wire    ap_CS_fsm_state8;
reg   [18:0] out_addr_reg_504;
wire   [0:0] icmp_ln364_fu_330_p2;
reg   [0:0] icmp_ln364_reg_509;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state16_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln364_reg_509_pp1_iter1_reg;
reg   [0:0] icmp_ln364_reg_509_pp1_iter2_reg;
wire   [6:0] add_ln364_fu_336_p2;
reg   [6:0] add_ln364_reg_513;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] select_ln364_fu_348_p3;
reg   [4:0] select_ln364_reg_518;
wire   [2:0] select_ln364_1_fu_362_p3;
reg   [2:0] select_ln364_1_reg_525;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state10_pp1_stage1_iter0;
wire    ap_block_state17_pp1_stage1_iter1;
wire    ap_block_state24_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
reg   [31:0] in_load_1_reg_541;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state11_pp1_stage2_iter0;
wire    ap_block_state18_pp1_stage2_iter1;
wire    ap_block_pp1_stage2_11001;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state12_pp1_stage3_iter0;
wire    ap_block_state19_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_11001;
reg   [31:0] kernel_load_reg_556;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state13_pp1_stage4_iter0;
wire    ap_block_state20_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_11001;
wire   [4:0] k_fu_416_p2;
reg   [4:0] k_reg_561;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_state15_pp1_stage6_iter0;
wire    ap_block_state22_pp1_stage6_iter1;
wire    ap_block_pp1_stage6_11001;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] tmp_s_reg_566;
wire   [31:0] grp_fu_244_p2;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state25;
wire   [9:0] i_11_fu_425_p2;
reg   [9:0] i_11_reg_581;
reg   [31:0] b_load_reg_586;
wire    ap_CS_fsm_state26;
reg   [31:0] tmp_reg_591;
wire    ap_CS_fsm_state33;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage6_subdone;
wire    ap_block_pp1_stage1_subdone;
reg   [18:0] indvar_flatten8_reg_166;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state4;
reg   [8:0] nk_0_reg_177;
reg   [9:0] j_reg_188;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_203_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_t_0_phi_fu_214_p4;
wire   [31:0] ap_phi_mux_empty_26_phi_fu_225_p4;
reg   [4:0] ap_phi_mux_k_0_phi_fu_237_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln363_fu_326_p1;
wire   [63:0] zext_ln369_1_fu_399_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln369_2_fu_412_p1;
wire    ap_block_pp1_stage3;
wire   [63:0] zext_ln372_fu_421_p1;
reg   [31:0] grp_fu_244_p0;
reg   [31:0] grp_fu_244_p1;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire   [0:0] icmp_ln361_fu_282_p2;
wire   [8:0] add_ln356_1_fu_296_p2;
wire   [8:0] mul_ln359_1_fu_320_p0;
wire   [18:0] grp_fu_430_p3;
wire   [0:0] icmp_ln367_fu_342_p2;
wire   [2:0] add_ln364_1_fu_356_p2;
wire   [9:0] zext_ln369_fu_377_p1;
wire   [9:0] add_ln369_fu_380_p2;
wire   [11:0] zext_ln364_fu_374_p1;
wire   [11:0] shl_ln_fu_385_p3;
wire   [11:0] add_ln369_1_fu_393_p2;
wire   [15:0] k_0_cast2_fu_404_p1;
wire   [15:0] grp_fu_439_p3;
wire    ap_block_pp1_stage6;
wire   [8:0] grp_fu_430_p0;
wire   [10:0] grp_fu_430_p1;
wire   [9:0] grp_fu_430_p2;
wire   [2:0] grp_fu_439_p0;
wire   [5:0] grp_fu_439_p1;
wire   [15:0] grp_fu_439_p2;
reg   [23:0] ap_NS_fsm;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_state14_pp1_stage5_iter0;
wire    ap_block_state21_pp1_stage5_iter1;
wire    ap_block_pp1_stage5_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [18:0] grp_fu_430_p00;
wire   [18:0] grp_fu_430_p20;
wire   [8:0] grp_fu_439_p00;
wire   [15:0] mul_ln359_1_fu_320_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

kerneldl_kerneldl_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kerneldl_fadd_32ns_32ns_32_7_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_244_p0),
    .din1(grp_fu_244_p1),
    .ce(1'b1),
    .dout(grp_fu_244_p2)
);

kerneldl_kerneldl_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kerneldl_fmul_32ns_32ns_32_4_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_load_1_reg_541),
    .din1(kernel_load_reg_556),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_430_p0),
    .din1(grp_fu_430_p1),
    .din2(grp_fu_430_p2),
    .ce(1'b1),
    .dout(grp_fu_430_p3)
);

kerneldl_kerneldl_mac_muladd_3ns_6ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
kerneldl_mac_muladd_3ns_6ns_16ns_16_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_439_p0),
    .din1(grp_fu_439_p1),
    .din2(grp_fu_439_p2),
    .ce(1'b1),
    .dout(grp_fu_439_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage6_subdone) & (1'b1 == ap_CS_fsm_pp1_stage6))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage6_subdone) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln364_reg_509_pp1_iter2_reg == 1'd0))) begin
        empty_26_reg_221 <= grp_fu_244_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_26_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln349_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_0_reg_155 <= i_fu_259_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_155 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten8_reg_166 <= 19'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        indvar_flatten8_reg_166 <= add_ln356_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln364_reg_509 == 1'd0))) begin
        indvar_flatten_reg_199 <= add_ln364_reg_513;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_199 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_188 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        j_reg_188 <= i_11_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln364_reg_509 == 1'd0))) begin
        k_0_reg_233 <= k_reg_561;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_0_reg_233 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        nk_0_reg_177 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        nk_0_reg_177 <= select_ln359_1_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln364_reg_509 == 1'd0))) begin
        t_0_reg_210 <= select_ln364_1_reg_525;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        t_0_reg_210 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln356_reg_470 <= add_ln356_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln364_reg_513 <= add_ln364_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        b_load_reg_586 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_11_reg_581 <= i_11_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln349_reg_448 <= icmp_ln349_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln364_reg_509 <= icmp_ln364_fu_330_p2;
        icmp_ln364_reg_509_pp1_iter1_reg <= icmp_ln364_reg_509;
        icmp_ln364_reg_509_pp1_iter2_reg <= icmp_ln364_reg_509_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln364_reg_509 == 1'd0))) begin
        in_load_1_reg_541 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln364_reg_509 == 1'd0))) begin
        k_reg_561 <= k_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (icmp_ln364_reg_509 == 1'd0))) begin
        kernel_load_reg_556 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln359_1_reg_499[15 : 3] <= mul_ln359_1_fu_320_p2[15 : 3];
        out_addr_reg_504 <= zext_ln363_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln356_fu_270_p2 == 1'd0))) begin
        select_ln359_1_reg_483 <= select_ln359_1_fu_302_p3;
        select_ln359_reg_475 <= select_ln359_fu_288_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln364_fu_330_p2 == 1'd0))) begin
        select_ln364_1_reg_525 <= select_ln364_1_fu_362_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln364_fu_330_p2 == 1'd0))) begin
        select_ln364_reg_518 <= select_ln364_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_reg_591 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln364_reg_509_pp1_iter1_reg == 1'd0))) begin
        tmp_s_reg_566 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln349_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln351_reg_457[11 : 0] <= zext_ln351_fu_265_p1[11 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln349_fu_253_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln364_fu_330_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln356_fu_270_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln364_reg_509 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_203_p4 = add_ln364_reg_513;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_203_p4 = indvar_flatten_reg_199;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln364_reg_509 == 1'd0))) begin
        ap_phi_mux_k_0_phi_fu_237_p4 = k_reg_561;
    end else begin
        ap_phi_mux_k_0_phi_fu_237_p4 = k_0_reg_233;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln364_reg_509 == 1'd0))) begin
        ap_phi_mux_t_0_phi_fu_214_p4 = select_ln364_1_reg_525;
    end else begin
        ap_phi_mux_t_0_phi_fu_214_p4 = t_0_reg_210;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln356_fu_270_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv1d_actc_ce0 = 1'b1;
    end else begin
        conv1d_actc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln349_reg_448 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv1d_actc_we0 = 1'b1;
    end else begin
        conv1d_actc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_244_p0 = empty_26_reg_221;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        grp_fu_244_p0 = ap_phi_mux_empty_26_phi_fu_225_p4;
    end else begin
        grp_fu_244_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_244_p1 = b_load_reg_586;
    end else if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        grp_fu_244_p1 = tmp_s_reg_566;
    end else begin
        grp_fu_244_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        in_r_address0 = zext_ln369_1_fu_399_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_r_address0 = zext_ln351_fu_265_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln349_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln349_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln356_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln364_fu_330_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln364_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln356_1_fu_296_p2 = (nk_0_reg_177 + 9'd1);

assign add_ln356_fu_276_p2 = (indvar_flatten8_reg_166 + 19'd1);

assign add_ln364_1_fu_356_p2 = (ap_phi_mux_t_0_phi_fu_214_p4 + 3'd1);

assign add_ln364_fu_336_p2 = (ap_phi_mux_indvar_flatten_phi_fu_203_p4 + 7'd1);

assign add_ln369_1_fu_393_p2 = (zext_ln364_fu_374_p1 + shl_ln_fu_385_p3);

assign add_ln369_fu_380_p2 = (zext_ln369_fu_377_p1 + select_ln359_reg_475);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_empty_26_phi_fu_225_p4 = empty_26_reg_221;

assign b_address0 = zext_ln372_fu_421_p1;

assign conv1d_actc_address0 = zext_ln351_reg_457;

assign conv1d_actc_d0 = in_r_q0;

assign grp_fu_430_p0 = grp_fu_430_p00;

assign grp_fu_430_p00 = select_ln359_1_fu_302_p3;

assign grp_fu_430_p1 = 19'd975;

assign grp_fu_430_p2 = grp_fu_430_p20;

assign grp_fu_430_p20 = select_ln359_reg_475;

assign grp_fu_439_p0 = grp_fu_439_p00;

assign grp_fu_439_p00 = select_ln364_1_fu_362_p3;

assign grp_fu_439_p1 = 9'd26;

assign grp_fu_439_p2 = (k_0_cast2_fu_404_p1 + mul_ln359_1_reg_499);

assign i_11_fu_425_p2 = (select_ln359_reg_475 + 10'd1);

assign i_fu_259_p2 = (i_0_reg_155 + 12'd1);

assign icmp_ln349_fu_253_p2 = ((i_0_reg_155 == 12'd4000) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_270_p2 = ((indvar_flatten8_reg_166 == 19'd312000) ? 1'b1 : 1'b0);

assign icmp_ln361_fu_282_p2 = ((j_reg_188 == 10'd975) ? 1'b1 : 1'b0);

assign icmp_ln364_fu_330_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_203_p4 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln367_fu_342_p2 = ((ap_phi_mux_k_0_phi_fu_237_p4 == 5'd26) ? 1'b1 : 1'b0);

assign k_0_cast2_fu_404_p1 = select_ln364_reg_518;

assign k_fu_416_p2 = (select_ln364_reg_518 + 5'd1);

assign kernel_address0 = zext_ln369_2_fu_412_p1;

assign mul_ln359_1_fu_320_p0 = mul_ln359_1_fu_320_p00;

assign mul_ln359_1_fu_320_p00 = select_ln359_1_reg_483;

assign mul_ln359_1_fu_320_p2 = (mul_ln359_1_fu_320_p0 * $signed('h68));

assign out_r_address0 = out_addr_reg_504;

assign out_r_d0 = tmp_reg_591;

assign select_ln359_1_fu_302_p3 = ((icmp_ln361_fu_282_p2[0:0] === 1'b1) ? add_ln356_1_fu_296_p2 : nk_0_reg_177);

assign select_ln359_fu_288_p3 = ((icmp_ln361_fu_282_p2[0:0] === 1'b1) ? 10'd0 : j_reg_188);

assign select_ln364_1_fu_362_p3 = ((icmp_ln367_fu_342_p2[0:0] === 1'b1) ? add_ln364_1_fu_356_p2 : ap_phi_mux_t_0_phi_fu_214_p4);

assign select_ln364_fu_348_p3 = ((icmp_ln367_fu_342_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_k_0_phi_fu_237_p4);

assign shl_ln_fu_385_p3 = {{add_ln369_fu_380_p2}, {2'd0}};

assign zext_ln351_fu_265_p1 = i_0_reg_155;

assign zext_ln363_fu_326_p1 = grp_fu_430_p3;

assign zext_ln364_fu_374_p1 = select_ln364_1_reg_525;

assign zext_ln369_1_fu_399_p1 = add_ln369_1_fu_393_p2;

assign zext_ln369_2_fu_412_p1 = grp_fu_439_p3;

assign zext_ln369_fu_377_p1 = select_ln364_reg_518;

assign zext_ln372_fu_421_p1 = select_ln359_reg_475;

always @ (posedge ap_clk) begin
    zext_ln351_reg_457[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    mul_ln359_1_reg_499[2:0] <= 3'b000;
end

endmodule //kerneldl_forward_1

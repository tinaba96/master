// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kerneldl_backward_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1d_actc_address0,
        conv1d_actc_ce0,
        conv1d_actc_q0,
        dout_address0,
        dout_ce0,
        dout_q0,
        gradsw1_address0,
        gradsw1_ce0,
        gradsw1_we0,
        gradsw1_d0,
        gradsw1_q0,
        gradsb1_address0,
        gradsb1_ce0,
        gradsb1_q0,
        gradsb1_address1,
        gradsb1_ce1,
        gradsb1_we1,
        gradsb1_d1
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_pp0_stage0 = 14'd2;
parameter    ap_ST_fsm_pp0_stage1 = 14'd4;
parameter    ap_ST_fsm_pp0_stage2 = 14'd8;
parameter    ap_ST_fsm_pp0_stage3 = 14'd16;
parameter    ap_ST_fsm_pp0_stage4 = 14'd32;
parameter    ap_ST_fsm_pp0_stage5 = 14'd64;
parameter    ap_ST_fsm_pp0_stage6 = 14'd128;
parameter    ap_ST_fsm_pp0_stage7 = 14'd256;
parameter    ap_ST_fsm_pp0_stage8 = 14'd512;
parameter    ap_ST_fsm_pp0_stage9 = 14'd1024;
parameter    ap_ST_fsm_state19 = 14'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 14'd4096;
parameter    ap_ST_fsm_state33 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv1d_actc_address0;
output   conv1d_actc_ce0;
input  [31:0] conv1d_actc_q0;
output  [14:0] dout_address0;
output   dout_ce0;
input  [31:0] dout_q0;
output  [15:0] gradsw1_address0;
output   gradsw1_ce0;
output   gradsw1_we0;
output  [31:0] gradsw1_d0;
input  [31:0] gradsw1_q0;
output  [18:0] gradsb1_address0;
output   gradsb1_ce0;
input  [31:0] gradsb1_q0;
output  [18:0] gradsb1_address1;
output   gradsb1_ce1;
output   gradsb1_we1;
output  [31:0] gradsb1_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv1d_actc_ce0;
reg[14:0] dout_address0;
reg dout_ce0;
reg[15:0] gradsw1_address0;
reg gradsw1_ce0;
reg gradsw1_we0;
reg gradsb1_ce0;
reg gradsb1_ce1;
reg gradsb1_we1;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [24:0] indvar_flatten63_reg_148;
reg   [8:0] j_0_reg_160;
reg   [17:0] indvar_flatten25_reg_171;
reg   [2:0] t_0_reg_182;
reg   [14:0] indvar_flatten_reg_194;
reg   [4:0] s_0_reg_206;
reg   [9:0] i_0_reg_218;
reg   [18:0] indvar_flatten70_reg_229;
reg   [8:0] j1_0_reg_240;
reg   [9:0] o_0_reg_251;
reg   [31:0] reg_270;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state16_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] icmp_ln402_reg_707;
wire    ap_block_state20_pp1_stage0_iter0;
wire    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
wire    ap_block_state23_pp1_stage0_iter3;
wire    ap_block_state24_pp1_stage0_iter4;
wire    ap_block_state25_pp1_stage0_iter5;
wire    ap_block_state26_pp1_stage0_iter6;
wire    ap_block_state27_pp1_stage0_iter7;
wire    ap_block_state28_pp1_stage0_iter8;
wire    ap_block_state29_pp1_stage0_iter9;
wire    ap_block_state30_pp1_stage0_iter10;
wire    ap_block_state31_pp1_stage0_iter11;
wire    ap_block_state32_pp1_stage0_iter12;
wire    ap_block_pp1_stage0_11001;
reg    ap_enable_reg_pp1_iter4;
reg   [0:0] icmp_ln429_reg_881;
reg   [0:0] icmp_ln429_reg_881_pp1_iter3_reg;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] reg_276;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state17_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
reg   [0:0] icmp_ln402_reg_707_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter11;
reg   [0:0] icmp_ln429_reg_881_pp1_iter10_reg;
wire   [15:0] mul_ln404_fu_286_p2;
reg   [15:0] mul_ln404_reg_701;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln402_fu_292_p2;
wire   [0:0] icmp_ln407_fu_298_p2;
reg   [0:0] icmp_ln407_reg_711;
wire   [2:0] select_ln405_fu_304_p3;
reg   [2:0] select_ln405_reg_719;
wire   [8:0] add_ln402_1_fu_312_p2;
reg   [8:0] add_ln402_1_reg_725;
wire   [8:0] select_ln405_2_fu_318_p3;
reg   [8:0] select_ln405_2_reg_730;
wire   [0:0] and_ln405_1_fu_354_p2;
reg   [0:0] and_ln405_1_reg_740;
wire   [0:0] or_ln407_fu_360_p2;
reg   [0:0] or_ln407_reg_747;
wire   [0:0] and_ln407_fu_386_p2;
reg   [0:0] and_ln407_reg_752;
wire   [4:0] s_fu_392_p2;
reg   [4:0] s_reg_757;
wire   [9:0] select_ln410_fu_410_p3;
reg   [9:0] select_ln410_reg_762;
wire   [4:0] select_ln410_2_fu_418_p3;
reg   [4:0] select_ln410_2_reg_769;
wire   [17:0] add_ln407_1_fu_426_p2;
reg   [17:0] add_ln407_1_reg_775;
wire   [6:0] mul_ln409_fu_436_p2;
reg   [6:0] mul_ln409_reg_780;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state13_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] add_ln414_1_fu_456_p2;
reg   [15:0] add_ln414_1_reg_785;
wire   [24:0] add_ln402_fu_461_p2;
reg   [24:0] add_ln402_reg_790;
wire   [2:0] t_fu_467_p2;
reg   [2:0] t_reg_795;
wire   [2:0] select_ln407_1_fu_472_p3;
reg   [2:0] select_ln407_1_reg_800;
wire   [9:0] i_fu_509_p2;
reg   [9:0] i_reg_810;
wire   [14:0] add_ln410_1_fu_514_p2;
reg   [14:0] add_ln410_1_reg_815;
wire   [15:0] mul_ln404_1_fu_523_p2;
reg   [15:0] mul_ln404_1_reg_820;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state14_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] conv1d_actc_load_reg_831;
wire   [15:0] select_ln407_3_fu_574_p3;
reg   [15:0] select_ln407_3_reg_836;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state15_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [15:0] add_ln414_7_fu_594_p2;
reg   [15:0] add_ln414_7_reg_841;
wire   [15:0] select_ln410_1_fu_604_p3;
reg   [15:0] select_ln410_1_reg_851;
reg   [15:0] gradsw1_addr_reg_856;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] tmp_s_reg_861;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] gradsw1_load_reg_866;
wire   [14:0] select_ln410_3_fu_613_p3;
reg   [14:0] select_ln410_3_reg_871;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [17:0] select_ln407_4_fu_619_p3;
reg   [17:0] select_ln407_4_reg_876;
wire   [0:0] icmp_ln429_fu_625_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln429_reg_881_pp1_iter1_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter2_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter4_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter5_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter6_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter7_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter8_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter9_reg;
reg   [0:0] icmp_ln429_reg_881_pp1_iter11_reg;
wire   [18:0] add_ln429_fu_631_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [9:0] select_ln431_fu_643_p3;
reg   [9:0] select_ln431_reg_890;
reg   [9:0] select_ln431_reg_890_pp1_iter1_reg;
wire   [8:0] select_ln431_1_fu_657_p3;
reg   [8:0] select_ln431_1_reg_895;
wire   [9:0] o_fu_669_p2;
reg   [18:0] gradsb1_addr_reg_920;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter4_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter5_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter6_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter7_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter8_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter9_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter10_reg;
reg   [18:0] gradsb1_addr_reg_920_pp1_iter11_reg;
reg   [31:0] gradsb1_load_reg_926;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_state18_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_subdone;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_CS_fsm_state19;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter12;
reg   [24:0] ap_phi_mux_indvar_flatten63_phi_fu_152_p4;
wire    ap_block_pp0_stage0;
reg   [8:0] ap_phi_mux_j_0_phi_fu_164_p4;
reg   [17:0] ap_phi_mux_indvar_flatten25_phi_fu_175_p4;
reg   [2:0] ap_phi_mux_t_0_phi_fu_186_p4;
reg   [14:0] ap_phi_mux_indvar_flatten_phi_fu_198_p4;
reg   [4:0] ap_phi_mux_s_0_phi_fu_210_p4;
reg   [9:0] ap_phi_mux_i_0_phi_fu_222_p4;
reg   [8:0] ap_phi_mux_j1_0_phi_fu_244_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln414_2_fu_504_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln414_3_fu_600_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln410_2_fu_609_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln434_fu_678_p1;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage6;
reg   [31:0] grp_fu_262_p0;
reg   [31:0] grp_fu_262_p1;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage5;
wire   [8:0] mul_ln404_fu_286_p0;
wire   [0:0] icmp_ln412_fu_336_p2;
wire   [0:0] xor_ln405_fu_330_p2;
wire   [0:0] icmp_ln410_fu_348_p2;
wire   [0:0] xor_ln407_fu_374_p2;
wire   [0:0] and_ln405_fu_342_p2;
wire   [0:0] or_ln407_1_fu_380_p2;
wire   [4:0] select_ln407_fu_366_p3;
wire   [0:0] or_ln410_fu_398_p2;
wire   [0:0] or_ln410_1_fu_404_p2;
wire   [2:0] mul_ln409_fu_436_p0;
wire   [6:0] zext_ln410_fu_442_p1;
wire   [6:0] add_ln414_fu_446_p2;
wire   [15:0] zext_ln414_fu_452_p1;
wire   [9:0] zext_ln410_3_fu_482_p1;
wire   [9:0] add_ln414_2_fu_485_p2;
wire   [11:0] shl_ln_fu_490_p3;
wire   [11:0] zext_ln407_fu_478_p1;
wire   [11:0] add_ln414_3_fu_498_p2;
wire    ap_block_pp0_stage2;
wire   [8:0] mul_ln404_1_fu_523_p0;
wire   [2:0] mul_ln409_1_fu_551_p0;
wire   [6:0] mul_ln409_1_fu_551_p2;
wire   [6:0] select_ln405_3_fu_537_p3;
wire   [15:0] zext_ln414_1_fu_564_p1;
wire   [15:0] select_ln405_1_fu_532_p3;
wire   [15:0] add_ln414_5_fu_568_p2;
wire   [15:0] select_ln405_4_fu_543_p3;
wire   [6:0] select_ln407_2_fu_557_p3;
wire   [6:0] zext_ln410_1_fu_581_p1;
wire   [6:0] add_ln414_6_fu_584_p2;
wire   [15:0] zext_ln414_4_fu_590_p1;
wire   [18:0] grp_fu_683_p3;
wire    ap_block_pp0_stage4;
wire   [0:0] icmp_ln432_fu_637_p2;
wire   [8:0] add_ln429_1_fu_651_p2;
wire   [18:0] grp_fu_692_p3;
wire   [8:0] grp_fu_683_p0;
wire   [10:0] grp_fu_683_p1;
wire   [9:0] grp_fu_683_p2;
wire   [8:0] grp_fu_692_p0;
wire   [10:0] grp_fu_692_p1;
wire   [9:0] grp_fu_692_p2;
wire    ap_CS_fsm_state33;
reg   [13:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [18:0] grp_fu_683_p00;
wire   [18:0] grp_fu_683_p20;
wire   [18:0] grp_fu_692_p00;
wire   [18:0] grp_fu_692_p20;
wire   [15:0] mul_ln404_1_fu_523_p00;
wire   [15:0] mul_ln404_fu_286_p00;
wire   [6:0] mul_ln409_1_fu_551_p00;
wire   [6:0] mul_ln409_fu_436_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
end

kerneldl_kerneldl_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kerneldl_fadd_32ns_32ns_32_7_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_262_p0),
    .din1(grp_fu_262_p1),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

kerneldl_kerneldl_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kerneldl_fmul_32ns_32ns_32_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1d_actc_load_reg_831),
    .din1(reg_270),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_683_p0),
    .din1(grp_fu_683_p1),
    .din2(grp_fu_683_p2),
    .ce(1'b1),
    .dout(grp_fu_683_p3)
);

kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 19 ))
kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_692_p0),
    .din1(grp_fu_692_p1),
    .din2(grp_fu_692_p2),
    .ce(1'b1),
    .dout(grp_fu_692_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        i_0_reg_218 <= i_reg_810;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_218 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        indvar_flatten25_reg_171 <= select_ln407_4_reg_876;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten25_reg_171 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        indvar_flatten63_reg_148 <= add_ln402_reg_790;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten63_reg_148 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar_flatten70_reg_229 <= 19'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_fu_625_p2 == 1'd0))) begin
        indvar_flatten70_reg_229 <= add_ln429_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        indvar_flatten_reg_194 <= select_ln410_3_reg_871;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_194 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j1_0_reg_240 <= 9'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_reg_881 == 1'd0))) begin
        j1_0_reg_240 <= select_ln431_1_reg_895;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        j_0_reg_160 <= select_ln405_2_reg_730;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_160 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        o_0_reg_251 <= 10'd0;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_fu_625_p2 == 1'd0))) begin
        o_0_reg_251 <= o_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        s_0_reg_206 <= select_ln410_2_reg_769;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        s_0_reg_206 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_reg_707 == 1'd0))) begin
        t_0_reg_182 <= select_ln407_1_reg_800;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_0_reg_182 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_fu_292_p2 == 1'd0))) begin
        add_ln402_1_reg_725 <= add_ln402_1_fu_312_p2;
        add_ln407_1_reg_775 <= add_ln407_1_fu_426_p2;
        and_ln405_1_reg_740 <= and_ln405_1_fu_354_p2;
        and_ln407_reg_752 <= and_ln407_fu_386_p2;
        icmp_ln407_reg_711 <= icmp_ln407_fu_298_p2;
        or_ln407_reg_747 <= or_ln407_fu_360_p2;
        s_reg_757 <= s_fu_392_p2;
        select_ln405_reg_719 <= select_ln405_fu_304_p3;
        select_ln410_reg_762 <= select_ln410_fu_410_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln402_reg_790 <= add_ln402_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln407_reg_747 == 1'd0) & (icmp_ln402_reg_707 == 1'd0))) begin
        add_ln410_1_reg_815 <= add_ln410_1_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == and_ln407_reg_752) & (1'd0 == and_ln405_1_reg_740) & (icmp_ln407_reg_711 == 1'd0))) begin
        add_ln414_1_reg_785 <= add_ln414_1_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln407_reg_752) & (icmp_ln402_reg_707 == 1'd0))) begin
        add_ln414_7_reg_841 <= add_ln414_7_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln402_reg_707 == 1'd0))) begin
        conv1d_actc_load_reg_831 <= conv1d_actc_q0;
        mul_ln404_1_reg_820[15 : 3] <= mul_ln404_1_fu_523_p2[15 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_reg_881_pp1_iter2_reg == 1'd0))) begin
        gradsb1_addr_reg_920 <= zext_ln434_fu_678_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        gradsb1_addr_reg_920_pp1_iter10_reg <= gradsb1_addr_reg_920_pp1_iter9_reg;
        gradsb1_addr_reg_920_pp1_iter11_reg <= gradsb1_addr_reg_920_pp1_iter10_reg;
        gradsb1_addr_reg_920_pp1_iter4_reg <= gradsb1_addr_reg_920;
        gradsb1_addr_reg_920_pp1_iter5_reg <= gradsb1_addr_reg_920_pp1_iter4_reg;
        gradsb1_addr_reg_920_pp1_iter6_reg <= gradsb1_addr_reg_920_pp1_iter5_reg;
        gradsb1_addr_reg_920_pp1_iter7_reg <= gradsb1_addr_reg_920_pp1_iter6_reg;
        gradsb1_addr_reg_920_pp1_iter8_reg <= gradsb1_addr_reg_920_pp1_iter7_reg;
        gradsb1_addr_reg_920_pp1_iter9_reg <= gradsb1_addr_reg_920_pp1_iter8_reg;
        icmp_ln429_reg_881_pp1_iter10_reg <= icmp_ln429_reg_881_pp1_iter9_reg;
        icmp_ln429_reg_881_pp1_iter11_reg <= icmp_ln429_reg_881_pp1_iter10_reg;
        icmp_ln429_reg_881_pp1_iter2_reg <= icmp_ln429_reg_881_pp1_iter1_reg;
        icmp_ln429_reg_881_pp1_iter3_reg <= icmp_ln429_reg_881_pp1_iter2_reg;
        icmp_ln429_reg_881_pp1_iter4_reg <= icmp_ln429_reg_881_pp1_iter3_reg;
        icmp_ln429_reg_881_pp1_iter5_reg <= icmp_ln429_reg_881_pp1_iter4_reg;
        icmp_ln429_reg_881_pp1_iter6_reg <= icmp_ln429_reg_881_pp1_iter5_reg;
        icmp_ln429_reg_881_pp1_iter7_reg <= icmp_ln429_reg_881_pp1_iter6_reg;
        icmp_ln429_reg_881_pp1_iter8_reg <= icmp_ln429_reg_881_pp1_iter7_reg;
        icmp_ln429_reg_881_pp1_iter9_reg <= icmp_ln429_reg_881_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_reg_881_pp1_iter3_reg == 1'd0))) begin
        gradsb1_load_reg_926 <= gradsb1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln402_reg_707 == 1'd0))) begin
        gradsw1_addr_reg_856 <= zext_ln410_2_fu_609_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln402_reg_707 == 1'd0))) begin
        gradsw1_load_reg_866 <= gradsw1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln402_reg_707 == 1'd0))) begin
        i_reg_810 <= i_fu_509_p2;
        select_ln407_1_reg_800 <= select_ln407_1_fu_472_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln402_reg_707 <= icmp_ln402_fu_292_p2;
        icmp_ln402_reg_707_pp0_iter1_reg <= icmp_ln402_reg_707;
        mul_ln404_reg_701[15 : 3] <= mul_ln404_fu_286_p2[15 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln429_reg_881 <= icmp_ln429_fu_625_p2;
        icmp_ln429_reg_881_pp1_iter1_reg <= icmp_ln429_reg_881;
        select_ln431_reg_890_pp1_iter1_reg <= select_ln431_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln409_reg_780[6 : 1] <= mul_ln409_fu_436_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln402_reg_707 == 1'd0)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_reg_881_pp1_iter3_reg == 1'd0)))) begin
        reg_270 <= dout_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln402_reg_707_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_reg_881_pp1_iter10_reg == 1'd0)))) begin
        reg_276 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln402_fu_292_p2 == 1'd0))) begin
        select_ln405_2_reg_730 <= select_ln405_2_fu_318_p3;
        select_ln410_2_reg_769 <= select_ln410_2_fu_418_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd0 == and_ln407_reg_752) & (icmp_ln402_reg_707 == 1'd0))) begin
        select_ln407_3_reg_836 <= select_ln407_3_fu_574_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln402_reg_707 == 1'd0))) begin
        select_ln407_4_reg_876 <= select_ln407_4_fu_619_p3;
        select_ln410_3_reg_871 <= select_ln410_3_fu_613_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln402_reg_707 == 1'd0))) begin
        select_ln410_1_reg_851 <= select_ln410_1_fu_604_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_fu_625_p2 == 1'd0))) begin
        select_ln431_1_reg_895 <= select_ln431_1_fu_657_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_fu_625_p2 == 1'd0))) begin
        select_ln431_reg_890 <= select_ln431_fu_643_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln402_reg_707 == 1'd0))) begin
        t_reg_795 <= t_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln402_reg_707 == 1'd0))) begin
        tmp_s_reg_861 <= grp_fu_266_p2;
    end
end

always @ (*) begin
    if ((icmp_ln402_reg_707 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln429_fu_625_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_222_p4 = i_reg_810;
    end else begin
        ap_phi_mux_i_0_phi_fu_222_p4 = i_0_reg_218;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_indvar_flatten25_phi_fu_175_p4 = select_ln407_4_reg_876;
    end else begin
        ap_phi_mux_indvar_flatten25_phi_fu_175_p4 = indvar_flatten25_reg_171;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_indvar_flatten63_phi_fu_152_p4 = add_ln402_reg_790;
    end else begin
        ap_phi_mux_indvar_flatten63_phi_fu_152_p4 = indvar_flatten63_reg_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = select_ln410_3_reg_871;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = indvar_flatten_reg_194;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln429_reg_881 == 1'd0))) begin
        ap_phi_mux_j1_0_phi_fu_244_p4 = select_ln431_1_reg_895;
    end else begin
        ap_phi_mux_j1_0_phi_fu_244_p4 = j1_0_reg_240;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_j_0_phi_fu_164_p4 = select_ln405_2_reg_730;
    end else begin
        ap_phi_mux_j_0_phi_fu_164_p4 = j_0_reg_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_s_0_phi_fu_210_p4 = select_ln410_2_reg_769;
    end else begin
        ap_phi_mux_s_0_phi_fu_210_p4 = s_0_reg_206;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707 == 1'd0))) begin
        ap_phi_mux_t_0_phi_fu_186_p4 = select_ln407_1_reg_800;
    end else begin
        ap_phi_mux_t_0_phi_fu_186_p4 = t_0_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1d_actc_ce0 = 1'b1;
    end else begin
        conv1d_actc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dout_address0 = zext_ln434_fu_678_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dout_address0 = zext_ln414_3_fu_600_p1;
    end else begin
        dout_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        dout_ce0 = 1'b1;
    end else begin
        dout_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gradsb1_ce0 = 1'b1;
    end else begin
        gradsb1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gradsb1_ce1 = 1'b1;
    end else begin
        gradsb1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln429_reg_881_pp1_iter11_reg == 1'd0))) begin
        gradsb1_we1 = 1'b1;
    end else begin
        gradsb1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gradsw1_address0 = gradsw1_addr_reg_856;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        gradsw1_address0 = zext_ln410_2_fu_609_p1;
    end else begin
        gradsw1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gradsw1_ce0 = 1'b1;
    end else begin
        gradsw1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln402_reg_707_pp0_iter1_reg == 1'd0))) begin
        gradsw1_we0 = 1'b1;
    end else begin
        gradsw1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        grp_fu_262_p0 = gradsb1_load_reg_926;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_262_p0 = gradsw1_load_reg_866;
    end else begin
        grp_fu_262_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        grp_fu_262_p1 = reg_270;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_262_p1 = tmp_s_reg_861;
    end else begin
        grp_fu_262_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln402_reg_707 == 1'd1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln402_reg_707 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln429_fu_625_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter12 == 1'b1) & (ap_enable_reg_pp1_iter11 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter12 == 1'b1) & (ap_enable_reg_pp1_iter11 == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln429_fu_625_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln402_1_fu_312_p2 = (ap_phi_mux_j_0_phi_fu_164_p4 + 9'd1);

assign add_ln402_fu_461_p2 = (indvar_flatten63_reg_148 + 25'd1);

assign add_ln407_1_fu_426_p2 = (ap_phi_mux_indvar_flatten25_phi_fu_175_p4 + 18'd1);

assign add_ln410_1_fu_514_p2 = (indvar_flatten_reg_194 + 15'd1);

assign add_ln414_1_fu_456_p2 = (mul_ln404_reg_701 + zext_ln414_fu_452_p1);

assign add_ln414_2_fu_485_p2 = (zext_ln410_3_fu_482_p1 + select_ln410_reg_762);

assign add_ln414_3_fu_498_p2 = (shl_ln_fu_490_p3 + zext_ln407_fu_478_p1);

assign add_ln414_5_fu_568_p2 = (zext_ln414_1_fu_564_p1 + select_ln405_1_fu_532_p3);

assign add_ln414_6_fu_584_p2 = (select_ln407_2_fu_557_p3 + zext_ln410_1_fu_581_p1);

assign add_ln414_7_fu_594_p2 = (zext_ln414_4_fu_590_p1 + select_ln405_1_fu_532_p3);

assign add_ln414_fu_446_p2 = (zext_ln410_fu_442_p1 + mul_ln409_fu_436_p2);

assign add_ln429_1_fu_651_p2 = (ap_phi_mux_j1_0_phi_fu_244_p4 + 9'd1);

assign add_ln429_fu_631_p2 = (indvar_flatten70_reg_229 + 19'd1);

assign and_ln405_1_fu_354_p2 = (xor_ln405_fu_330_p2 & icmp_ln410_fu_348_p2);

assign and_ln405_fu_342_p2 = (xor_ln405_fu_330_p2 & icmp_ln412_fu_336_p2);

assign and_ln407_fu_386_p2 = (or_ln407_1_fu_380_p2 & and_ln405_fu_342_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd13];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign conv1d_actc_address0 = zext_ln414_2_fu_504_p1;

assign gradsb1_address0 = zext_ln434_fu_678_p1;

assign gradsb1_address1 = gradsb1_addr_reg_920_pp1_iter11_reg;

assign gradsb1_d1 = reg_276;

assign gradsw1_d0 = reg_276;

assign grp_fu_683_p0 = grp_fu_683_p00;

assign grp_fu_683_p00 = select_ln405_2_fu_318_p3;

assign grp_fu_683_p1 = 19'd975;

assign grp_fu_683_p2 = grp_fu_683_p20;

assign grp_fu_683_p20 = select_ln410_reg_762;

assign grp_fu_692_p0 = grp_fu_692_p00;

assign grp_fu_692_p00 = select_ln431_1_fu_657_p3;

assign grp_fu_692_p1 = 19'd975;

assign grp_fu_692_p2 = grp_fu_692_p20;

assign grp_fu_692_p20 = select_ln431_reg_890_pp1_iter1_reg;

assign i_fu_509_p2 = (select_ln410_reg_762 + 10'd1);

assign icmp_ln402_fu_292_p2 = ((ap_phi_mux_indvar_flatten63_phi_fu_152_p4 == 25'd32448000) ? 1'b1 : 1'b0);

assign icmp_ln407_fu_298_p2 = ((ap_phi_mux_indvar_flatten25_phi_fu_175_p4 == 18'd101400) ? 1'b1 : 1'b0);

assign icmp_ln410_fu_348_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_198_p4 == 15'd25350) ? 1'b1 : 1'b0);

assign icmp_ln412_fu_336_p2 = ((ap_phi_mux_i_0_phi_fu_222_p4 == 10'd975) ? 1'b1 : 1'b0);

assign icmp_ln429_fu_625_p2 = ((indvar_flatten70_reg_229 == 19'd312000) ? 1'b1 : 1'b0);

assign icmp_ln432_fu_637_p2 = ((o_0_reg_251 == 10'd975) ? 1'b1 : 1'b0);

assign mul_ln404_1_fu_523_p0 = mul_ln404_1_fu_523_p00;

assign mul_ln404_1_fu_523_p00 = add_ln402_1_reg_725;

assign mul_ln404_1_fu_523_p2 = (mul_ln404_1_fu_523_p0 * $signed('h68));

assign mul_ln404_fu_286_p0 = mul_ln404_fu_286_p00;

assign mul_ln404_fu_286_p00 = ap_phi_mux_j_0_phi_fu_164_p4;

assign mul_ln404_fu_286_p2 = (mul_ln404_fu_286_p0 * $signed('h68));

assign mul_ln409_1_fu_551_p0 = mul_ln409_1_fu_551_p00;

assign mul_ln409_1_fu_551_p00 = t_reg_795;

assign mul_ln409_1_fu_551_p2 = (mul_ln409_1_fu_551_p0 * $signed('h1A));

assign mul_ln409_fu_436_p0 = mul_ln409_fu_436_p00;

assign mul_ln409_fu_436_p00 = t_0_reg_182;

assign mul_ln409_fu_436_p2 = (mul_ln409_fu_436_p0 * $signed('h1A));

assign o_fu_669_p2 = (select_ln431_fu_643_p3 + 10'd1);

assign or_ln407_1_fu_380_p2 = (xor_ln407_fu_374_p2 | icmp_ln407_fu_298_p2);

assign or_ln407_fu_360_p2 = (icmp_ln407_fu_298_p2 | and_ln405_1_fu_354_p2);

assign or_ln410_1_fu_404_p2 = (or_ln410_fu_398_p2 | icmp_ln407_fu_298_p2);

assign or_ln410_fu_398_p2 = (and_ln407_fu_386_p2 | and_ln405_1_fu_354_p2);

assign s_fu_392_p2 = (select_ln407_fu_366_p3 + 5'd1);

assign select_ln405_1_fu_532_p3 = ((icmp_ln407_reg_711[0:0] === 1'b1) ? mul_ln404_1_reg_820 : mul_ln404_reg_701);

assign select_ln405_2_fu_318_p3 = ((icmp_ln407_fu_298_p2[0:0] === 1'b1) ? add_ln402_1_fu_312_p2 : ap_phi_mux_j_0_phi_fu_164_p4);

assign select_ln405_3_fu_537_p3 = ((icmp_ln407_reg_711[0:0] === 1'b1) ? 7'd0 : mul_ln409_reg_780);

assign select_ln405_4_fu_543_p3 = ((icmp_ln407_reg_711[0:0] === 1'b1) ? mul_ln404_1_reg_820 : add_ln414_1_reg_785);

assign select_ln405_fu_304_p3 = ((icmp_ln407_fu_298_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_t_0_phi_fu_186_p4);

assign select_ln407_1_fu_472_p3 = ((and_ln405_1_reg_740[0:0] === 1'b1) ? t_fu_467_p2 : select_ln405_reg_719);

assign select_ln407_2_fu_557_p3 = ((and_ln405_1_reg_740[0:0] === 1'b1) ? mul_ln409_1_fu_551_p2 : select_ln405_3_fu_537_p3);

assign select_ln407_3_fu_574_p3 = ((and_ln405_1_reg_740[0:0] === 1'b1) ? add_ln414_5_fu_568_p2 : select_ln405_4_fu_543_p3);

assign select_ln407_4_fu_619_p3 = ((icmp_ln407_reg_711[0:0] === 1'b1) ? 18'd1 : add_ln407_1_reg_775);

assign select_ln407_fu_366_p3 = ((or_ln407_fu_360_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_s_0_phi_fu_210_p4);

assign select_ln410_1_fu_604_p3 = ((and_ln407_reg_752[0:0] === 1'b1) ? add_ln414_7_reg_841 : select_ln407_3_reg_836);

assign select_ln410_2_fu_418_p3 = ((and_ln407_fu_386_p2[0:0] === 1'b1) ? s_fu_392_p2 : select_ln407_fu_366_p3);

assign select_ln410_3_fu_613_p3 = ((or_ln407_reg_747[0:0] === 1'b1) ? 15'd1 : add_ln410_1_reg_815);

assign select_ln410_fu_410_p3 = ((or_ln410_1_fu_404_p2[0:0] === 1'b1) ? 10'd0 : ap_phi_mux_i_0_phi_fu_222_p4);

assign select_ln431_1_fu_657_p3 = ((icmp_ln432_fu_637_p2[0:0] === 1'b1) ? add_ln429_1_fu_651_p2 : ap_phi_mux_j1_0_phi_fu_244_p4);

assign select_ln431_fu_643_p3 = ((icmp_ln432_fu_637_p2[0:0] === 1'b1) ? 10'd0 : o_0_reg_251);

assign shl_ln_fu_490_p3 = {{add_ln414_2_fu_485_p2}, {2'd0}};

assign t_fu_467_p2 = (select_ln405_reg_719 + 3'd1);

assign xor_ln405_fu_330_p2 = (icmp_ln407_fu_298_p2 ^ 1'd1);

assign xor_ln407_fu_374_p2 = (icmp_ln410_fu_348_p2 ^ 1'd1);

assign zext_ln407_fu_478_p1 = select_ln407_1_fu_472_p3;

assign zext_ln410_1_fu_581_p1 = s_reg_757;

assign zext_ln410_2_fu_609_p1 = select_ln410_1_reg_851;

assign zext_ln410_3_fu_482_p1 = select_ln410_2_reg_769;

assign zext_ln410_fu_442_p1 = s_0_reg_206;

assign zext_ln414_1_fu_564_p1 = mul_ln409_1_fu_551_p2;

assign zext_ln414_2_fu_504_p1 = add_ln414_3_fu_498_p2;

assign zext_ln414_3_fu_600_p1 = grp_fu_683_p3;

assign zext_ln414_4_fu_590_p1 = add_ln414_6_fu_584_p2;

assign zext_ln414_fu_452_p1 = add_ln414_fu_446_p2;

assign zext_ln434_fu_678_p1 = grp_fu_692_p3;

always @ (posedge ap_clk) begin
    mul_ln404_reg_701[2:0] <= 3'b000;
    mul_ln409_reg_780[0] <= 1'b0;
    mul_ln404_1_reg_820[2:0] <= 3'b000;
end

endmodule //kerneldl_backward_1

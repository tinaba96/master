-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kerneldl_backward_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1d_actc_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1d_actc_ce0 : OUT STD_LOGIC;
    conv1d_actc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dout_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    dout_ce0 : OUT STD_LOGIC;
    dout_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gradsw1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gradsw1_ce0 : OUT STD_LOGIC;
    gradsw1_we0 : OUT STD_LOGIC;
    gradsw1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    gradsw1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gradsb1_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradsb1_ce0 : OUT STD_LOGIC;
    gradsb1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gradsb1_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    gradsb1_ce1 : OUT STD_LOGIC;
    gradsb1_we1 : OUT STD_LOGIC;
    gradsb1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kerneldl_backward_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv16_68 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001101000";
    constant ap_const_lv25_1EF1E00 : STD_LOGIC_VECTOR (24 downto 0) := "1111011110001111000000000";
    constant ap_const_lv18_18C18 : STD_LOGIC_VECTOR (17 downto 0) := "011000110000011000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_3CF : STD_LOGIC_VECTOR (9 downto 0) := "1111001111";
    constant ap_const_lv15_6306 : STD_LOGIC_VECTOR (14 downto 0) := "110001100000110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv7_1A : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv19_4C2C0 : STD_LOGIC_VECTOR (18 downto 0) := "1001100001011000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_3CF : STD_LOGIC_VECTOR (18 downto 0) := "0000000001111001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten63_reg_148 : STD_LOGIC_VECTOR (24 downto 0);
    signal j_0_reg_160 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten25_reg_171 : STD_LOGIC_VECTOR (17 downto 0);
    signal t_0_reg_182 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_194 : STD_LOGIC_VECTOR (14 downto 0);
    signal s_0_reg_206 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_218 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten70_reg_229 : STD_LOGIC_VECTOR (18 downto 0);
    signal j1_0_reg_240 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_0_reg_251 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln402_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal icmp_ln429_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal icmp_ln402_reg_707_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal icmp_ln429_reg_881_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln404_fu_286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln404_reg_701 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln402_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln405_fu_304_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln405_reg_719 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln402_1_fu_312_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln402_1_reg_725 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln405_2_fu_318_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln405_2_reg_730 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln405_1_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln405_1_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln407_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln407_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_reg_757 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln410_fu_410_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln410_reg_762 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln410_2_fu_418_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln410_2_reg_769 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln407_1_fu_426_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln407_1_reg_775 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln409_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln409_reg_780 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln414_1_fu_456_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln414_1_reg_785 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln402_fu_461_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln402_reg_790 : STD_LOGIC_VECTOR (24 downto 0);
    signal t_fu_467_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_reg_795 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_1_fu_472_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_1_reg_800 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_509_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_810 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln410_1_fu_514_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln410_1_reg_815 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln404_1_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln404_1_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv1d_actc_load_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln407_3_fu_574_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln407_3_reg_836 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln414_7_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln414_7_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln410_1_fu_604_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln410_1_reg_851 : STD_LOGIC_VECTOR (15 downto 0);
    signal gradsw1_addr_reg_856 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal gradsw1_load_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln410_3_fu_613_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln410_3_reg_871 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal select_ln407_4_fu_619_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln407_4_reg_876 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln429_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln429_reg_881_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln429_reg_881_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln429_fu_631_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln431_fu_643_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln431_reg_890 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln431_reg_890_pp1_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln431_1_fu_657_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln431_1_reg_895 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_fu_669_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal gradsb1_addr_reg_920 : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter4_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter5_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter6_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter7_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter8_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter9_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter10_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_addr_reg_920_pp1_iter11_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal gradsb1_load_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten63_phi_fu_152_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_0_phi_fu_164_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten25_phi_fu_175_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_phi_mux_t_0_phi_fu_186_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_198_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_s_0_phi_fu_210_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i_0_phi_fu_222_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_j1_0_phi_fu_244_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln414_2_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln414_3_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln410_2_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln434_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal grp_fu_262_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal mul_ln404_fu_286_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln412_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln405_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln410_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln407_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln405_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln407_1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln407_fu_366_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln410_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln410_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln409_fu_436_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln410_fu_442_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln414_fu_446_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_fu_452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln410_3_fu_482_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln414_2_fu_485_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_490_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln407_fu_478_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln414_3_fu_498_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal mul_ln404_1_fu_523_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln409_1_fu_551_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln409_1_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln405_3_fu_537_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_1_fu_564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln405_1_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln414_5_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln405_4_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln407_2_fu_557_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln410_1_fu_581_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln414_6_fu_584_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_4_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_683_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal icmp_ln432_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln429_1_fu_651_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_692_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_683_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_692_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_692_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_683_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_683_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_692_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_692_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln404_1_fu_523_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln404_fu_286_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln409_1_fu_551_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln409_fu_436_p00 : STD_LOGIC_VECTOR (6 downto 0);

    component kerneldl_kerneldl_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kerneldl_kerneldl_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    kerneldl_fadd_32ns_32ns_32_7_full_dsp_1_U4 : component kerneldl_kerneldl_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_262_p0,
        din1 => grp_fu_262_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    kerneldl_fmul_32ns_32ns_32_4_max_dsp_1_U5 : component kerneldl_kerneldl_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv1d_actc_load_reg_831,
        din1 => reg_270,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1_U6 : component kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_683_p0,
        din1 => grp_fu_683_p1,
        din2 => grp_fu_683_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_683_p3);

    kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1_U7 : component kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_692_p0,
        din1 => grp_fu_692_p1,
        din2 => grp_fu_692_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_692_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                i_0_reg_218 <= i_reg_810;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_218 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                indvar_flatten25_reg_171 <= select_ln407_4_reg_876;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten25_reg_171 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                indvar_flatten63_reg_148 <= add_ln402_reg_790;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten63_reg_148 <= ap_const_lv25_0;
            end if; 
        end if;
    end process;

    indvar_flatten70_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten70_reg_229 <= ap_const_lv19_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_fu_625_p2 = ap_const_lv1_0))) then 
                indvar_flatten70_reg_229 <= add_ln429_fu_631_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                indvar_flatten_reg_194 <= select_ln410_3_reg_871;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_194 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    j1_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j1_0_reg_240 <= ap_const_lv9_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_reg_881 = ap_const_lv1_0))) then 
                j1_0_reg_240 <= select_ln431_1_reg_895;
            end if; 
        end if;
    end process;

    j_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                j_0_reg_160 <= select_ln405_2_reg_730;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_160 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    o_0_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                o_0_reg_251 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_fu_625_p2 = ap_const_lv1_0))) then 
                o_0_reg_251 <= o_fu_669_p2;
            end if; 
        end if;
    end process;

    s_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                s_0_reg_206 <= select_ln410_2_reg_769;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_0_reg_206 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    t_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
                t_0_reg_182 <= select_ln407_1_reg_800;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_0_reg_182 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_fu_292_p2 = ap_const_lv1_0))) then
                add_ln402_1_reg_725 <= add_ln402_1_fu_312_p2;
                add_ln407_1_reg_775 <= add_ln407_1_fu_426_p2;
                and_ln405_1_reg_740 <= and_ln405_1_fu_354_p2;
                and_ln407_reg_752 <= and_ln407_fu_386_p2;
                icmp_ln407_reg_711 <= icmp_ln407_fu_298_p2;
                or_ln407_reg_747 <= or_ln407_fu_360_p2;
                s_reg_757 <= s_fu_392_p2;
                select_ln405_reg_719 <= select_ln405_fu_304_p3;
                select_ln410_reg_762 <= select_ln410_fu_410_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln402_reg_790 <= add_ln402_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln407_reg_747 = ap_const_lv1_0) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                add_ln410_1_reg_815 <= add_ln410_1_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln407_reg_752) and (ap_const_lv1_0 = and_ln405_1_reg_740) and (icmp_ln407_reg_711 = ap_const_lv1_0))) then
                add_ln414_1_reg_785 <= add_ln414_1_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_1 = and_ln407_reg_752) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                add_ln414_7_reg_841 <= add_ln414_7_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                conv1d_actc_load_reg_831 <= conv1d_actc_q0;
                    mul_ln404_1_reg_820(15 downto 3) <= mul_ln404_1_fu_523_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_reg_881_pp1_iter2_reg = ap_const_lv1_0))) then
                gradsb1_addr_reg_920 <= zext_ln434_fu_678_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                gradsb1_addr_reg_920_pp1_iter10_reg <= gradsb1_addr_reg_920_pp1_iter9_reg;
                gradsb1_addr_reg_920_pp1_iter11_reg <= gradsb1_addr_reg_920_pp1_iter10_reg;
                gradsb1_addr_reg_920_pp1_iter4_reg <= gradsb1_addr_reg_920;
                gradsb1_addr_reg_920_pp1_iter5_reg <= gradsb1_addr_reg_920_pp1_iter4_reg;
                gradsb1_addr_reg_920_pp1_iter6_reg <= gradsb1_addr_reg_920_pp1_iter5_reg;
                gradsb1_addr_reg_920_pp1_iter7_reg <= gradsb1_addr_reg_920_pp1_iter6_reg;
                gradsb1_addr_reg_920_pp1_iter8_reg <= gradsb1_addr_reg_920_pp1_iter7_reg;
                gradsb1_addr_reg_920_pp1_iter9_reg <= gradsb1_addr_reg_920_pp1_iter8_reg;
                icmp_ln429_reg_881_pp1_iter10_reg <= icmp_ln429_reg_881_pp1_iter9_reg;
                icmp_ln429_reg_881_pp1_iter11_reg <= icmp_ln429_reg_881_pp1_iter10_reg;
                icmp_ln429_reg_881_pp1_iter2_reg <= icmp_ln429_reg_881_pp1_iter1_reg;
                icmp_ln429_reg_881_pp1_iter3_reg <= icmp_ln429_reg_881_pp1_iter2_reg;
                icmp_ln429_reg_881_pp1_iter4_reg <= icmp_ln429_reg_881_pp1_iter3_reg;
                icmp_ln429_reg_881_pp1_iter5_reg <= icmp_ln429_reg_881_pp1_iter4_reg;
                icmp_ln429_reg_881_pp1_iter6_reg <= icmp_ln429_reg_881_pp1_iter5_reg;
                icmp_ln429_reg_881_pp1_iter7_reg <= icmp_ln429_reg_881_pp1_iter6_reg;
                icmp_ln429_reg_881_pp1_iter8_reg <= icmp_ln429_reg_881_pp1_iter7_reg;
                icmp_ln429_reg_881_pp1_iter9_reg <= icmp_ln429_reg_881_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_reg_881_pp1_iter3_reg = ap_const_lv1_0))) then
                gradsb1_load_reg_926 <= gradsb1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                gradsw1_addr_reg_856 <= zext_ln410_2_fu_609_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                gradsw1_load_reg_866 <= gradsw1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                i_reg_810 <= i_fu_509_p2;
                select_ln407_1_reg_800 <= select_ln407_1_fu_472_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln402_reg_707 <= icmp_ln402_fu_292_p2;
                icmp_ln402_reg_707_pp0_iter1_reg <= icmp_ln402_reg_707;
                    mul_ln404_reg_701(15 downto 3) <= mul_ln404_fu_286_p2(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln429_reg_881 <= icmp_ln429_fu_625_p2;
                icmp_ln429_reg_881_pp1_iter1_reg <= icmp_ln429_reg_881;
                select_ln431_reg_890_pp1_iter1_reg <= select_ln431_reg_890;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    mul_ln409_reg_780(6 downto 1) <= mul_ln409_fu_436_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln402_reg_707 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_reg_881_pp1_iter3_reg = ap_const_lv1_0)))) then
                reg_270 <= dout_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln402_reg_707_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_reg_881_pp1_iter10_reg = ap_const_lv1_0)))) then
                reg_276 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln402_fu_292_p2 = ap_const_lv1_0))) then
                select_ln405_2_reg_730 <= select_ln405_2_fu_318_p3;
                select_ln410_2_reg_769 <= select_ln410_2_fu_418_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln407_reg_752) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                select_ln407_3_reg_836 <= select_ln407_3_fu_574_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                select_ln407_4_reg_876 <= select_ln407_4_fu_619_p3;
                select_ln410_3_reg_871 <= select_ln410_3_fu_613_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                select_ln410_1_reg_851 <= select_ln410_1_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_fu_625_p2 = ap_const_lv1_0))) then
                select_ln431_1_reg_895 <= select_ln431_1_fu_657_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_fu_625_p2 = ap_const_lv1_0))) then
                select_ln431_reg_890 <= select_ln431_fu_643_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                t_reg_795 <= t_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then
                tmp_s_reg_861 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    mul_ln404_reg_701(2 downto 0) <= "000";
    mul_ln409_reg_780(0) <= '0';
    mul_ln404_1_reg_820(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter11, icmp_ln429_fu_625_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage6_subdone, ap_CS_fsm_pp0_stage6, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter12, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln402_reg_707 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln402_reg_707 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln429_fu_625_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln429_fu_625_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln402_1_fu_312_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_phi_fu_164_p4) + unsigned(ap_const_lv9_1));
    add_ln402_fu_461_p2 <= std_logic_vector(unsigned(indvar_flatten63_reg_148) + unsigned(ap_const_lv25_1));
    add_ln407_1_fu_426_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten25_phi_fu_175_p4) + unsigned(ap_const_lv18_1));
    add_ln410_1_fu_514_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_194) + unsigned(ap_const_lv15_1));
    add_ln414_1_fu_456_p2 <= std_logic_vector(unsigned(mul_ln404_reg_701) + unsigned(zext_ln414_fu_452_p1));
    add_ln414_2_fu_485_p2 <= std_logic_vector(unsigned(zext_ln410_3_fu_482_p1) + unsigned(select_ln410_reg_762));
    add_ln414_3_fu_498_p2 <= std_logic_vector(unsigned(shl_ln_fu_490_p3) + unsigned(zext_ln407_fu_478_p1));
    add_ln414_5_fu_568_p2 <= std_logic_vector(unsigned(zext_ln414_1_fu_564_p1) + unsigned(select_ln405_1_fu_532_p3));
    add_ln414_6_fu_584_p2 <= std_logic_vector(unsigned(select_ln407_2_fu_557_p3) + unsigned(zext_ln410_1_fu_581_p1));
    add_ln414_7_fu_594_p2 <= std_logic_vector(unsigned(zext_ln414_4_fu_590_p1) + unsigned(select_ln405_1_fu_532_p3));
    add_ln414_fu_446_p2 <= std_logic_vector(unsigned(zext_ln410_fu_442_p1) + unsigned(mul_ln409_fu_436_p2));
    add_ln429_1_fu_651_p2 <= std_logic_vector(unsigned(ap_phi_mux_j1_0_phi_fu_244_p4) + unsigned(ap_const_lv9_1));
    add_ln429_fu_631_p2 <= std_logic_vector(unsigned(indvar_flatten70_reg_229) + unsigned(ap_const_lv19_1));
    and_ln405_1_fu_354_p2 <= (xor_ln405_fu_330_p2 and icmp_ln410_fu_348_p2);
    and_ln405_fu_342_p2 <= (xor_ln405_fu_330_p2 and icmp_ln412_fu_336_p2);
    and_ln407_fu_386_p2 <= (or_ln407_1_fu_380_p2 and and_ln405_fu_342_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(11);
    ap_CS_fsm_state33 <= ap_CS_fsm(13);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln402_reg_707)
    begin
        if ((icmp_ln402_reg_707 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln429_fu_625_p2)
    begin
        if ((icmp_ln429_fu_625_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_222_p4_assign_proc : process(i_0_reg_218, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, i_reg_810, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_222_p4 <= i_reg_810;
        else 
            ap_phi_mux_i_0_phi_fu_222_p4 <= i_0_reg_218;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten25_phi_fu_175_p4_assign_proc : process(indvar_flatten25_reg_171, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln407_4_reg_876, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten25_phi_fu_175_p4 <= select_ln407_4_reg_876;
        else 
            ap_phi_mux_indvar_flatten25_phi_fu_175_p4 <= indvar_flatten25_reg_171;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten63_phi_fu_152_p4_assign_proc : process(indvar_flatten63_reg_148, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, add_ln402_reg_790, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten63_phi_fu_152_p4 <= add_ln402_reg_790;
        else 
            ap_phi_mux_indvar_flatten63_phi_fu_152_p4 <= indvar_flatten63_reg_148;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_198_p4_assign_proc : process(indvar_flatten_reg_194, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln410_3_reg_871, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_198_p4 <= select_ln410_3_reg_871;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_198_p4 <= indvar_flatten_reg_194;
        end if; 
    end process;


    ap_phi_mux_j1_0_phi_fu_244_p4_assign_proc : process(j1_0_reg_240, icmp_ln429_reg_881, ap_CS_fsm_pp1_stage0, select_ln431_1_reg_895, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln429_reg_881 = ap_const_lv1_0))) then 
            ap_phi_mux_j1_0_phi_fu_244_p4 <= select_ln431_1_reg_895;
        else 
            ap_phi_mux_j1_0_phi_fu_244_p4 <= j1_0_reg_240;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_164_p4_assign_proc : process(j_0_reg_160, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln405_2_reg_730, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_j_0_phi_fu_164_p4 <= select_ln405_2_reg_730;
        else 
            ap_phi_mux_j_0_phi_fu_164_p4 <= j_0_reg_160;
        end if; 
    end process;


    ap_phi_mux_s_0_phi_fu_210_p4_assign_proc : process(s_0_reg_206, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln410_2_reg_769, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_s_0_phi_fu_210_p4 <= select_ln410_2_reg_769;
        else 
            ap_phi_mux_s_0_phi_fu_210_p4 <= s_0_reg_206;
        end if; 
    end process;


    ap_phi_mux_t_0_phi_fu_186_p4_assign_proc : process(t_0_reg_182, icmp_ln402_reg_707, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, select_ln407_1_reg_800, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707 = ap_const_lv1_0))) then 
            ap_phi_mux_t_0_phi_fu_186_p4 <= select_ln407_1_reg_800;
        else 
            ap_phi_mux_t_0_phi_fu_186_p4 <= t_0_reg_182;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv1d_actc_address0 <= zext_ln414_2_fu_504_p1(12 - 1 downto 0);

    conv1d_actc_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            conv1d_actc_ce0 <= ap_const_logic_1;
        else 
            conv1d_actc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dout_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, zext_ln414_3_fu_600_p1, ap_block_pp0_stage3, zext_ln434_fu_678_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            dout_address0 <= zext_ln434_fu_678_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dout_address0 <= zext_ln414_3_fu_600_p1(15 - 1 downto 0);
        else 
            dout_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    dout_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            dout_ce0 <= ap_const_logic_1;
        else 
            dout_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gradsb1_address0 <= zext_ln434_fu_678_p1(19 - 1 downto 0);
    gradsb1_address1 <= gradsb1_addr_reg_920_pp1_iter11_reg;

    gradsb1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            gradsb1_ce0 <= ap_const_logic_1;
        else 
            gradsb1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradsb1_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            gradsb1_ce1 <= ap_const_logic_1;
        else 
            gradsb1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    gradsb1_d1 <= reg_276;

    gradsb1_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln429_reg_881_pp1_iter11_reg, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln429_reg_881_pp1_iter11_reg = ap_const_lv1_0))) then 
            gradsb1_we1 <= ap_const_logic_1;
        else 
            gradsb1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gradsw1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, gradsw1_addr_reg_856, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, zext_ln410_2_fu_609_p1, ap_block_pp0_stage7, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gradsw1_address0 <= gradsw1_addr_reg_856;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            gradsw1_address0 <= zext_ln410_2_fu_609_p1(16 - 1 downto 0);
        else 
            gradsw1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gradsw1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gradsw1_ce0 <= ap_const_logic_1;
        else 
            gradsw1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gradsw1_d0 <= reg_276;

    gradsw1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln402_reg_707_pp0_iter1_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln402_reg_707_pp0_iter1_reg = ap_const_lv1_0))) then 
            gradsw1_we0 <= ap_const_logic_1;
        else 
            gradsw1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_262_p0_assign_proc : process(ap_enable_reg_pp0_iter0, gradsw1_load_reg_866, ap_CS_fsm_pp0_stage9, gradsb1_load_reg_926, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            grp_fu_262_p0 <= gradsb1_load_reg_926;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_262_p0 <= gradsw1_load_reg_866;
        else 
            grp_fu_262_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_262_p1_assign_proc : process(reg_270, ap_enable_reg_pp0_iter0, tmp_s_reg_861, ap_CS_fsm_pp0_stage9, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            grp_fu_262_p1 <= reg_270;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_262_p1 <= tmp_s_reg_861;
        else 
            grp_fu_262_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_683_p0 <= grp_fu_683_p00(9 - 1 downto 0);
    grp_fu_683_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln405_2_fu_318_p3),19));
    grp_fu_683_p1 <= ap_const_lv19_3CF(11 - 1 downto 0);
    grp_fu_683_p2 <= grp_fu_683_p20(10 - 1 downto 0);
    grp_fu_683_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln410_reg_762),19));
    grp_fu_692_p0 <= grp_fu_692_p00(9 - 1 downto 0);
    grp_fu_692_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln431_1_fu_657_p3),19));
    grp_fu_692_p1 <= ap_const_lv19_3CF(11 - 1 downto 0);
    grp_fu_692_p2 <= grp_fu_692_p20(10 - 1 downto 0);
    grp_fu_692_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln431_reg_890_pp1_iter1_reg),19));
    i_fu_509_p2 <= std_logic_vector(unsigned(select_ln410_reg_762) + unsigned(ap_const_lv10_1));
    icmp_ln402_fu_292_p2 <= "1" when (ap_phi_mux_indvar_flatten63_phi_fu_152_p4 = ap_const_lv25_1EF1E00) else "0";
    icmp_ln407_fu_298_p2 <= "1" when (ap_phi_mux_indvar_flatten25_phi_fu_175_p4 = ap_const_lv18_18C18) else "0";
    icmp_ln410_fu_348_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_198_p4 = ap_const_lv15_6306) else "0";
    icmp_ln412_fu_336_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_222_p4 = ap_const_lv10_3CF) else "0";
    icmp_ln429_fu_625_p2 <= "1" when (indvar_flatten70_reg_229 = ap_const_lv19_4C2C0) else "0";
    icmp_ln432_fu_637_p2 <= "1" when (o_0_reg_251 = ap_const_lv10_3CF) else "0";
    mul_ln404_1_fu_523_p0 <= mul_ln404_1_fu_523_p00(9 - 1 downto 0);
    mul_ln404_1_fu_523_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln402_1_reg_725),16));
    mul_ln404_1_fu_523_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln404_1_fu_523_p0) * unsigned(ap_const_lv16_68), 16));
    mul_ln404_fu_286_p0 <= mul_ln404_fu_286_p00(9 - 1 downto 0);
    mul_ln404_fu_286_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_164_p4),16));
    mul_ln404_fu_286_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln404_fu_286_p0) * unsigned(ap_const_lv16_68), 16));
    mul_ln409_1_fu_551_p0 <= mul_ln409_1_fu_551_p00(3 - 1 downto 0);
    mul_ln409_1_fu_551_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_795),7));
    mul_ln409_1_fu_551_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln409_1_fu_551_p0) * unsigned(ap_const_lv7_1A), 7));
    mul_ln409_fu_436_p0 <= mul_ln409_fu_436_p00(3 - 1 downto 0);
    mul_ln409_fu_436_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_182),7));
    mul_ln409_fu_436_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln409_fu_436_p0) * unsigned(ap_const_lv7_1A), 7));
    o_fu_669_p2 <= std_logic_vector(unsigned(select_ln431_fu_643_p3) + unsigned(ap_const_lv10_1));
    or_ln407_1_fu_380_p2 <= (xor_ln407_fu_374_p2 or icmp_ln407_fu_298_p2);
    or_ln407_fu_360_p2 <= (icmp_ln407_fu_298_p2 or and_ln405_1_fu_354_p2);
    or_ln410_1_fu_404_p2 <= (or_ln410_fu_398_p2 or icmp_ln407_fu_298_p2);
    or_ln410_fu_398_p2 <= (and_ln407_fu_386_p2 or and_ln405_1_fu_354_p2);
    s_fu_392_p2 <= std_logic_vector(unsigned(select_ln407_fu_366_p3) + unsigned(ap_const_lv5_1));
    select_ln405_1_fu_532_p3 <= 
        mul_ln404_1_reg_820 when (icmp_ln407_reg_711(0) = '1') else 
        mul_ln404_reg_701;
    select_ln405_2_fu_318_p3 <= 
        add_ln402_1_fu_312_p2 when (icmp_ln407_fu_298_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_164_p4;
    select_ln405_3_fu_537_p3 <= 
        ap_const_lv7_0 when (icmp_ln407_reg_711(0) = '1') else 
        mul_ln409_reg_780;
    select_ln405_4_fu_543_p3 <= 
        mul_ln404_1_reg_820 when (icmp_ln407_reg_711(0) = '1') else 
        add_ln414_1_reg_785;
    select_ln405_fu_304_p3 <= 
        ap_const_lv3_0 when (icmp_ln407_fu_298_p2(0) = '1') else 
        ap_phi_mux_t_0_phi_fu_186_p4;
    select_ln407_1_fu_472_p3 <= 
        t_fu_467_p2 when (and_ln405_1_reg_740(0) = '1') else 
        select_ln405_reg_719;
    select_ln407_2_fu_557_p3 <= 
        mul_ln409_1_fu_551_p2 when (and_ln405_1_reg_740(0) = '1') else 
        select_ln405_3_fu_537_p3;
    select_ln407_3_fu_574_p3 <= 
        add_ln414_5_fu_568_p2 when (and_ln405_1_reg_740(0) = '1') else 
        select_ln405_4_fu_543_p3;
    select_ln407_4_fu_619_p3 <= 
        ap_const_lv18_1 when (icmp_ln407_reg_711(0) = '1') else 
        add_ln407_1_reg_775;
    select_ln407_fu_366_p3 <= 
        ap_const_lv5_0 when (or_ln407_fu_360_p2(0) = '1') else 
        ap_phi_mux_s_0_phi_fu_210_p4;
    select_ln410_1_fu_604_p3 <= 
        add_ln414_7_reg_841 when (and_ln407_reg_752(0) = '1') else 
        select_ln407_3_reg_836;
    select_ln410_2_fu_418_p3 <= 
        s_fu_392_p2 when (and_ln407_fu_386_p2(0) = '1') else 
        select_ln407_fu_366_p3;
    select_ln410_3_fu_613_p3 <= 
        ap_const_lv15_1 when (or_ln407_reg_747(0) = '1') else 
        add_ln410_1_reg_815;
    select_ln410_fu_410_p3 <= 
        ap_const_lv10_0 when (or_ln410_1_fu_404_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_222_p4;
    select_ln431_1_fu_657_p3 <= 
        add_ln429_1_fu_651_p2 when (icmp_ln432_fu_637_p2(0) = '1') else 
        ap_phi_mux_j1_0_phi_fu_244_p4;
    select_ln431_fu_643_p3 <= 
        ap_const_lv10_0 when (icmp_ln432_fu_637_p2(0) = '1') else 
        o_0_reg_251;
    shl_ln_fu_490_p3 <= (add_ln414_2_fu_485_p2 & ap_const_lv2_0);
    t_fu_467_p2 <= std_logic_vector(unsigned(select_ln405_reg_719) + unsigned(ap_const_lv3_1));
    xor_ln405_fu_330_p2 <= (icmp_ln407_fu_298_p2 xor ap_const_lv1_1);
    xor_ln407_fu_374_p2 <= (icmp_ln410_fu_348_p2 xor ap_const_lv1_1);
    zext_ln407_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln407_1_fu_472_p3),12));
    zext_ln410_1_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_reg_757),7));
    zext_ln410_2_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln410_1_reg_851),64));
    zext_ln410_3_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln410_2_reg_769),10));
    zext_ln410_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_0_reg_206),7));
    zext_ln414_1_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln409_1_fu_551_p2),16));
    zext_ln414_2_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_3_fu_498_p2),64));
    zext_ln414_3_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_683_p3),64));
    zext_ln414_4_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_6_fu_584_p2),16));
    zext_ln414_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_fu_446_p2),16));
    zext_ln434_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_692_p3),64));
end behav;

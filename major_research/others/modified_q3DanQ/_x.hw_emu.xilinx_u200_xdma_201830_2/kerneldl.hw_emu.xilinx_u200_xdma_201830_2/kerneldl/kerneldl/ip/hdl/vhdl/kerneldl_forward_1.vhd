-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kerneldl_forward_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1d_actc_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1d_actc_ce0 : OUT STD_LOGIC;
    conv1d_actc_we0 : OUT STD_LOGIC;
    conv1d_actc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kerneldl_forward_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_FA0 : STD_LOGIC_VECTOR (11 downto 0) := "111110100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv19_4C2C0 : STD_LOGIC_VECTOR (18 downto 0) := "1001100001011000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_3CF : STD_LOGIC_VECTOR (9 downto 0) := "1111001111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_68 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001101000";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv19_3CF : STD_LOGIC_VECTOR (18 downto 0) := "0000000001111001111";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_155 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_reg_199 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_0_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_26_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln349_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln349_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln351_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln351_reg_457 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln356_fu_276_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln356_reg_470 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln359_fu_288_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln359_reg_475 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln356_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln359_1_fu_302_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln359_1_reg_483 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mul_ln359_1_fu_320_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln359_1_reg_499 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal out_addr_reg_504 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln364_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln364_reg_509_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_reg_509_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln364_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln364_reg_513 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln364_fu_348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln364_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln364_1_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln364_1_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state10_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state24_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal in_load_1_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state11_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state12_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal kernel_load_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_state13_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal k_fu_416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_561 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_state15_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage6_iter1 : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_11_fu_425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_11_reg_581 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_load_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal indvar_flatten8_reg_166 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal nk_0_reg_177 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_188 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_203_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_t_0_phi_fu_214_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_empty_26_phi_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_0_phi_fu_237_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln363_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln369_1_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln369_2_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal zext_ln372_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_pp1_stage5 : BOOLEAN;
    signal icmp_ln361_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln356_1_fu_296_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln359_1_fu_320_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_430_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln367_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln364_1_fu_356_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln369_fu_377_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln369_fu_380_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln364_fu_374_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_385_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln369_1_fu_393_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_0_cast2_fu_404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_439_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp1_stage6 : BOOLEAN;
    signal grp_fu_430_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_state14_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage5_iter1 : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_430_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_430_p20 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_439_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln359_1_fu_320_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component kerneldl_kerneldl_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kerneldl_kerneldl_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component kerneldl_kerneldl_mac_muladd_3ns_6ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    kerneldl_fadd_32ns_32ns_32_7_full_dsp_1_U15 : component kerneldl_kerneldl_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_244_p0,
        din1 => grp_fu_244_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    kerneldl_fmul_32ns_32ns_32_4_max_dsp_1_U16 : component kerneldl_kerneldl_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_load_1_reg_541,
        din1 => kernel_load_reg_556,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1_U17 : component kerneldl_kerneldl_mac_muladd_9ns_11ns_10ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        din2_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_430_p0,
        din1 => grp_fu_430_p1,
        din2 => grp_fu_430_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p3);

    kerneldl_mac_muladd_3ns_6ns_16ns_16_4_1_U18 : component kerneldl_kerneldl_mac_muladd_3ns_6ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 6,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_439_p0,
        din1 => grp_fu_439_p1,
        din2 => grp_fu_439_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_26_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln364_reg_509_pp1_iter2_reg = ap_const_lv1_0))) then 
                empty_26_reg_221 <= grp_fu_244_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                empty_26_reg_221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln349_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_0_reg_155 <= i_fu_259_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_155 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten8_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten8_reg_166 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvar_flatten8_reg_166 <= add_ln356_reg_470;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then 
                indvar_flatten_reg_199 <= add_ln364_reg_513;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_199 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_188 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_reg_188 <= i_11_reg_581;
            end if; 
        end if;
    end process;

    k_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then 
                k_0_reg_233 <= k_reg_561;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_0_reg_233 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    nk_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                nk_0_reg_177 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                nk_0_reg_177 <= select_ln359_1_reg_483;
            end if; 
        end if;
    end process;

    t_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then 
                t_0_reg_210 <= select_ln364_1_reg_525;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_0_reg_210 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln356_reg_470 <= add_ln356_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln364_reg_513 <= add_ln364_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                b_load_reg_586 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_11_reg_581 <= i_11_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln349_reg_448 <= icmp_ln349_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln364_reg_509 <= icmp_ln364_fu_330_p2;
                icmp_ln364_reg_509_pp1_iter1_reg <= icmp_ln364_reg_509;
                icmp_ln364_reg_509_pp1_iter2_reg <= icmp_ln364_reg_509_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then
                in_load_1_reg_541 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then
                k_reg_561 <= k_fu_416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then
                kernel_load_reg_556 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    mul_ln359_1_reg_499(15 downto 3) <= mul_ln359_1_fu_320_p2(15 downto 3);
                out_addr_reg_504 <= zext_ln363_fu_326_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln356_fu_270_p2 = ap_const_lv1_0))) then
                select_ln359_1_reg_483 <= select_ln359_1_fu_302_p3;
                select_ln359_reg_475 <= select_ln359_fu_288_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln364_fu_330_p2 = ap_const_lv1_0))) then
                select_ln364_1_reg_525 <= select_ln364_1_fu_362_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln364_fu_330_p2 = ap_const_lv1_0))) then
                select_ln364_reg_518 <= select_ln364_fu_348_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_reg_591 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln364_reg_509_pp1_iter1_reg = ap_const_lv1_0))) then
                tmp_s_reg_566 <= grp_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln349_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln351_reg_457(11 downto 0) <= zext_ln351_fu_265_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln351_reg_457(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    mul_ln359_1_reg_499(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln349_fu_253_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, icmp_ln356_fu_270_p2, icmp_ln364_fu_330_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage6_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln349_fu_253_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln349_fu_253_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln356_fu_270_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln364_fu_330_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln364_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) and (ap_const_boolean_0 = ap_block_pp1_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln356_1_fu_296_p2 <= std_logic_vector(unsigned(nk_0_reg_177) + unsigned(ap_const_lv9_1));
    add_ln356_fu_276_p2 <= std_logic_vector(unsigned(indvar_flatten8_reg_166) + unsigned(ap_const_lv19_1));
    add_ln364_1_fu_356_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_0_phi_fu_214_p4) + unsigned(ap_const_lv3_1));
    add_ln364_fu_336_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_203_p4) + unsigned(ap_const_lv7_1));
    add_ln369_1_fu_393_p2 <= std_logic_vector(unsigned(zext_ln364_fu_374_p1) + unsigned(shl_ln_fu_385_p3));
    add_ln369_fu_380_p2 <= std_logic_vector(unsigned(zext_ln369_fu_377_p1) + unsigned(select_ln359_reg_475));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(14);
    ap_CS_fsm_state26 <= ap_CS_fsm(15);
    ap_CS_fsm_state27 <= ap_CS_fsm(16);
    ap_CS_fsm_state33 <= ap_CS_fsm(22);
    ap_CS_fsm_state34 <= ap_CS_fsm(23);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln349_fu_253_p2)
    begin
        if ((icmp_ln349_fu_253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln364_fu_330_p2)
    begin
        if ((icmp_ln364_fu_330_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln356_fu_270_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln356_fu_270_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_empty_26_phi_fu_225_p4 <= empty_26_reg_221;

    ap_phi_mux_indvar_flatten_phi_fu_203_p4_assign_proc : process(indvar_flatten_reg_199, icmp_ln364_reg_509, ap_CS_fsm_pp1_stage0, add_ln364_reg_513, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_203_p4 <= add_ln364_reg_513;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_203_p4 <= indvar_flatten_reg_199;
        end if; 
    end process;


    ap_phi_mux_k_0_phi_fu_237_p4_assign_proc : process(k_0_reg_233, icmp_ln364_reg_509, ap_CS_fsm_pp1_stage0, k_reg_561, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then 
            ap_phi_mux_k_0_phi_fu_237_p4 <= k_reg_561;
        else 
            ap_phi_mux_k_0_phi_fu_237_p4 <= k_0_reg_233;
        end if; 
    end process;


    ap_phi_mux_t_0_phi_fu_214_p4_assign_proc : process(t_0_reg_210, icmp_ln364_reg_509, ap_CS_fsm_pp1_stage0, select_ln364_1_reg_525, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln364_reg_509 = ap_const_lv1_0))) then 
            ap_phi_mux_t_0_phi_fu_214_p4 <= select_ln364_1_reg_525;
        else 
            ap_phi_mux_t_0_phi_fu_214_p4 <= t_0_reg_210;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln356_fu_270_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln356_fu_270_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= zext_ln372_fu_421_p1(19 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1d_actc_address0 <= zext_ln351_reg_457(12 - 1 downto 0);

    conv1d_actc_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv1d_actc_ce0 <= ap_const_logic_1;
        else 
            conv1d_actc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1d_actc_d0 <= in_r_q0;

    conv1d_actc_we0_assign_proc : process(icmp_ln349_reg_448, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln349_reg_448 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv1d_actc_we0 <= ap_const_logic_1;
        else 
            conv1d_actc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_244_p0_assign_proc : process(empty_26_reg_221, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter1, ap_phi_mux_empty_26_phi_fu_225_p4, ap_block_pp1_stage2, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_244_p0 <= empty_26_reg_221;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            grp_fu_244_p0 <= ap_phi_mux_empty_26_phi_fu_225_p4;
        else 
            grp_fu_244_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_244_p1_assign_proc : process(ap_CS_fsm_pp1_stage2, tmp_s_reg_566, b_load_reg_586, ap_enable_reg_pp1_iter1, ap_block_pp1_stage2, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_244_p1 <= b_load_reg_586;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            grp_fu_244_p1 <= tmp_s_reg_566;
        else 
            grp_fu_244_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_430_p0 <= grp_fu_430_p00(9 - 1 downto 0);
    grp_fu_430_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln359_1_fu_302_p3),19));
    grp_fu_430_p1 <= ap_const_lv19_3CF(11 - 1 downto 0);
    grp_fu_430_p2 <= grp_fu_430_p20(10 - 1 downto 0);
    grp_fu_430_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln359_reg_475),19));
    grp_fu_439_p0 <= grp_fu_439_p00(3 - 1 downto 0);
    grp_fu_439_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln364_1_fu_362_p3),9));
    grp_fu_439_p1 <= ap_const_lv9_1A(6 - 1 downto 0);
    grp_fu_439_p2 <= std_logic_vector(unsigned(k_0_cast2_fu_404_p1) + unsigned(mul_ln359_1_reg_499));
    i_11_fu_425_p2 <= std_logic_vector(unsigned(select_ln359_reg_475) + unsigned(ap_const_lv10_1));
    i_fu_259_p2 <= std_logic_vector(unsigned(i_0_reg_155) + unsigned(ap_const_lv12_1));
    icmp_ln349_fu_253_p2 <= "1" when (i_0_reg_155 = ap_const_lv12_FA0) else "0";
    icmp_ln356_fu_270_p2 <= "1" when (indvar_flatten8_reg_166 = ap_const_lv19_4C2C0) else "0";
    icmp_ln361_fu_282_p2 <= "1" when (j_reg_188 = ap_const_lv10_3CF) else "0";
    icmp_ln364_fu_330_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_203_p4 = ap_const_lv7_68) else "0";
    icmp_ln367_fu_342_p2 <= "1" when (ap_phi_mux_k_0_phi_fu_237_p4 = ap_const_lv5_1A) else "0";

    in_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln351_fu_265_p1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp0_stage0, zext_ln369_1_fu_399_p1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            in_r_address0 <= zext_ln369_1_fu_399_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            in_r_address0 <= zext_ln351_fu_265_p1(12 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_0_cast2_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln364_reg_518),16));
    k_fu_416_p2 <= std_logic_vector(unsigned(select_ln364_reg_518) + unsigned(ap_const_lv5_1));
    kernel_address0 <= zext_ln369_2_fu_412_p1(16 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln359_1_fu_320_p0 <= mul_ln359_1_fu_320_p00(9 - 1 downto 0);
    mul_ln359_1_fu_320_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln359_1_reg_483),16));
    mul_ln359_1_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln359_1_fu_320_p0) * unsigned(ap_const_lv16_68), 16));
    out_r_address0 <= out_addr_reg_504;

    out_r_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= tmp_reg_591;

    out_r_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln359_1_fu_302_p3 <= 
        add_ln356_1_fu_296_p2 when (icmp_ln361_fu_282_p2(0) = '1') else 
        nk_0_reg_177;
    select_ln359_fu_288_p3 <= 
        ap_const_lv10_0 when (icmp_ln361_fu_282_p2(0) = '1') else 
        j_reg_188;
    select_ln364_1_fu_362_p3 <= 
        add_ln364_1_fu_356_p2 when (icmp_ln367_fu_342_p2(0) = '1') else 
        ap_phi_mux_t_0_phi_fu_214_p4;
    select_ln364_fu_348_p3 <= 
        ap_const_lv5_0 when (icmp_ln367_fu_342_p2(0) = '1') else 
        ap_phi_mux_k_0_phi_fu_237_p4;
    shl_ln_fu_385_p3 <= (add_ln369_fu_380_p2 & ap_const_lv2_0);
    zext_ln351_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_155),64));
    zext_ln363_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_430_p3),64));
    zext_ln364_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln364_1_reg_525),12));
    zext_ln369_1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln369_1_fu_393_p2),64));
    zext_ln369_2_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_439_p3),64));
    zext_ln369_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln364_reg_518),10));
    zext_ln372_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln359_reg_475),64));
end behav;

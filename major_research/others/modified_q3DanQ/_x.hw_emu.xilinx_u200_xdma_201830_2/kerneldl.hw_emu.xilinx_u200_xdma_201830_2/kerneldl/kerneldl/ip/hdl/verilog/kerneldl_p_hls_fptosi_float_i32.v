// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kerneldl_p_hls_fptosi_float_i32 (
        ap_clk,
        ap_rst,
        x,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] x;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

reg   [0:0] p_Result_s_reg_185;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] p_Val2_5_fu_166_p3;
reg   [31:0] p_Val2_5_reg_190;
wire    ap_block_pp0_stage0;
wire   [31:0] p_Val2_s_fu_44_p1;
wire   [22:0] tmp_V_1_fu_66_p1;
wire   [24:0] mantissa_V_fu_70_p4;
wire   [7:0] tmp_V_fu_56_p4;
wire   [8:0] zext_ln339_fu_84_p1;
wire   [8:0] add_ln339_fu_88_p2;
wire   [7:0] sub_ln1311_fu_102_p2;
wire   [0:0] isNeg_fu_94_p3;
wire  signed [8:0] sext_ln1311_fu_108_p1;
wire  signed [8:0] ush_fu_112_p3;
wire  signed [31:0] sext_ln1311_1_fu_120_p1;
wire  signed [24:0] sext_ln1311_2_fu_124_p1;
wire   [78:0] zext_ln682_fu_80_p1;
wire   [78:0] zext_ln1287_fu_128_p1;
wire   [24:0] r_V_fu_132_p2;
wire   [0:0] tmp_fu_144_p3;
wire   [78:0] r_V_1_fu_138_p2;
wire   [31:0] zext_ln662_fu_152_p1;
wire   [31:0] tmp_1_fu_156_p4;
wire   [31:0] result_V_1_fu_174_p2;
wire   [31:0] p_Val2_6_fu_179_p3;
reg    ap_ce_reg;
reg   [31:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= p_Val2_6_fu_179_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        p_Result_s_reg_185 <= p_Val2_s_fu_44_p1[32'd31];
        p_Val2_5_reg_190 <= p_Val2_5_fu_166_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = p_Val2_6_fu_179_p3;
    end
end

assign add_ln339_fu_88_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_84_p1));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign isNeg_fu_94_p3 = add_ln339_fu_88_p2[32'd8];

assign mantissa_V_fu_70_p4 = {{{{1'd1}, {tmp_V_1_fu_66_p1}}}, {1'd0}};

assign p_Val2_5_fu_166_p3 = ((isNeg_fu_94_p3[0:0] === 1'b1) ? zext_ln662_fu_152_p1 : tmp_1_fu_156_p4);

assign p_Val2_6_fu_179_p3 = ((p_Result_s_reg_185[0:0] === 1'b1) ? result_V_1_fu_174_p2 : p_Val2_5_reg_190);

assign p_Val2_s_fu_44_p1 = x;

assign r_V_1_fu_138_p2 = zext_ln682_fu_80_p1 << zext_ln1287_fu_128_p1;

assign r_V_fu_132_p2 = mantissa_V_fu_70_p4 >> sext_ln1311_2_fu_124_p1;

assign result_V_1_fu_174_p2 = (32'd0 - p_Val2_5_reg_190);

assign sext_ln1311_1_fu_120_p1 = ush_fu_112_p3;

assign sext_ln1311_2_fu_124_p1 = ush_fu_112_p3;

assign sext_ln1311_fu_108_p1 = $signed(sub_ln1311_fu_102_p2);

assign sub_ln1311_fu_102_p2 = (8'd127 - tmp_V_fu_56_p4);

assign tmp_1_fu_156_p4 = {{r_V_1_fu_138_p2[55:24]}};

assign tmp_V_1_fu_66_p1 = p_Val2_s_fu_44_p1[22:0];

assign tmp_V_fu_56_p4 = {{p_Val2_s_fu_44_p1[30:23]}};

assign tmp_fu_144_p3 = r_V_fu_132_p2[32'd24];

assign ush_fu_112_p3 = ((isNeg_fu_94_p3[0:0] === 1'b1) ? sext_ln1311_fu_108_p1 : add_ln339_fu_88_p2);

assign zext_ln1287_fu_128_p1 = $unsigned(sext_ln1311_1_fu_120_p1);

assign zext_ln339_fu_84_p1 = tmp_V_fu_56_p4;

assign zext_ln662_fu_152_p1 = tmp_fu_144_p3;

assign zext_ln682_fu_80_p1 = mantissa_V_fu_70_p4;

endmodule //kerneldl_p_hls_fptosi_float_i32
